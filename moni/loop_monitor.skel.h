/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __LOOP_MONITOR_BPF_SKEL_H__
#define __LOOP_MONITOR_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

#define BPF_SKEL_SUPPORTS_MAP_AUTO_ATTACH 1

struct loop_monitor_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *events;
		struct bpf_map *rodata_str1_1;
	} maps;
	struct {
		struct bpf_program *handle_loop_entry;
		struct bpf_program *handle_loop_exit;
	} progs;
	struct {
		struct bpf_link *handle_loop_entry;
		struct bpf_link *handle_loop_exit;
	} links;

#ifdef __cplusplus
	static inline struct loop_monitor_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct loop_monitor_bpf *open_and_load();
	static inline int load(struct loop_monitor_bpf *skel);
	static inline int attach(struct loop_monitor_bpf *skel);
	static inline void detach(struct loop_monitor_bpf *skel);
	static inline void destroy(struct loop_monitor_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
loop_monitor_bpf__destroy(struct loop_monitor_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
loop_monitor_bpf__create_skeleton(struct loop_monitor_bpf *obj);

static inline struct loop_monitor_bpf *
loop_monitor_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct loop_monitor_bpf *obj;
	int err;

	obj = (struct loop_monitor_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = loop_monitor_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	loop_monitor_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct loop_monitor_bpf *
loop_monitor_bpf__open(void)
{
	return loop_monitor_bpf__open_opts(NULL);
}

static inline int
loop_monitor_bpf__load(struct loop_monitor_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct loop_monitor_bpf *
loop_monitor_bpf__open_and_load(void)
{
	struct loop_monitor_bpf *obj;
	int err;

	obj = loop_monitor_bpf__open();
	if (!obj)
		return NULL;
	err = loop_monitor_bpf__load(obj);
	if (err) {
		loop_monitor_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
loop_monitor_bpf__attach(struct loop_monitor_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
loop_monitor_bpf__detach(struct loop_monitor_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *loop_monitor_bpf__elf_bytes(size_t *sz);

static inline int
loop_monitor_bpf__create_skeleton(struct loop_monitor_bpf *obj)
{
	struct bpf_object_skeleton *s;
	struct bpf_map_skeleton *map __attribute__((unused));
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "loop_monitor_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 2;
	s->map_skel_sz = 24;
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt,
			sizeof(*s->maps) > 24 ? sizeof(*s->maps) : 24);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	map = (struct bpf_map_skeleton *)((char *)s->maps + 0 * s->map_skel_sz);
	map->name = "events";
	map->map = &obj->maps.events;

	map = (struct bpf_map_skeleton *)((char *)s->maps + 1 * s->map_skel_sz);
	map->name = ".rodata.str1.1";
	map->map = &obj->maps.rodata_str1_1;

	/* programs */
	s->prog_cnt = 2;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "handle_loop_entry";
	s->progs[0].prog = &obj->progs.handle_loop_entry;
	s->progs[0].link = &obj->links.handle_loop_entry;

	s->progs[1].name = "handle_loop_exit";
	s->progs[1].prog = &obj->progs.handle_loop_exit;
	s->progs[1].link = &obj->links.handle_loop_exit;

	s->data = loop_monitor_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *loop_monitor_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\xb0\x0f\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x0d\0\
\x01\0\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\x79\x6d\x74\x61\x62\0\x2e\x74\
\x65\x78\x74\0\x75\x70\x72\x6f\x62\x65\x2f\x6c\x6f\x6f\x70\0\x75\x72\x65\x74\
\x70\x72\x6f\x62\x65\x2f\x6c\x6f\x6f\x70\0\x6c\x69\x63\x65\x6e\x73\x65\0\x2e\
\x6d\x61\x70\x73\0\x2e\x72\x6f\x64\x61\x74\x61\x2e\x73\x74\x72\x31\x2e\x31\0\
\x6c\x6f\x6f\x70\x5f\x6d\x6f\x6e\x69\x74\x6f\x72\x2e\x62\x70\x66\x2e\x63\0\x67\
\x65\x74\x5f\x74\x69\x64\0\x68\x61\x6e\x64\x6c\x65\x5f\x6c\x6f\x6f\x70\x5f\x65\
\x6e\x74\x72\x79\0\x65\x76\x65\x6e\x74\x73\0\x68\x61\x6e\x64\x6c\x65\x5f\x6c\
\x6f\x6f\x70\x5f\x65\x78\x69\x74\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2e\x72\x65\
\x6c\x75\x70\x72\x6f\x62\x65\x2f\x6c\x6f\x6f\x70\0\x2e\x72\x65\x6c\x75\x72\x65\
\x74\x70\x72\x6f\x62\x65\x2f\x6c\x6f\x6f\x70\0\x2e\x42\x54\x46\0\x2e\x42\x54\
\x46\x2e\x65\x78\x74\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x4f\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x03\0\x05\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x08\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x62\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\x10\0\0\0\
\0\0\0\0\x6a\0\0\0\x12\0\x04\0\0\0\0\0\0\0\0\0\x80\x01\0\0\0\0\0\0\x7c\0\0\0\
\x11\0\x07\0\0\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x83\0\0\0\x12\0\x05\0\0\0\0\0\0\
\0\0\0\x70\x01\0\0\0\0\0\0\x94\0\0\0\x11\0\x06\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\
\0\0\x85\0\0\0\x0e\0\0\0\x95\0\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xb7\x02\0\0\x58\0\0\0\xb7\x03\0\0\0\0\0\0\x85\0\0\0\x83\0\0\0\xbf\x06\0\0\0\0\
\0\0\x15\x06\x27\0\0\0\0\0\x85\0\0\0\x0e\0\0\0\x77\0\0\0\x20\0\0\0\x63\x06\0\0\
\0\0\0\0\x85\x10\0\0\xff\xff\xff\xff\x63\x06\x04\0\0\0\0\0\x85\0\0\0\x05\0\0\0\
\x7b\x06\x08\0\0\0\0\0\xb7\x01\0\0\x65\0\0\0\x7b\x1a\xf8\xff\0\0\0\0\x85\0\0\0\
\x08\0\0\0\x79\xa1\xf8\xff\0\0\0\0\x73\x16\x1f\0\0\0\0\0\xb7\x01\0\0\x20\0\0\0\
\x73\x16\x1e\0\0\0\0\0\xb7\x01\0\0\x29\0\0\0\x73\x16\x1d\0\0\0\0\0\xb7\x01\0\0\
\x28\0\0\0\x73\x16\x1c\0\0\0\0\0\xb7\x01\0\0\x70\0\0\0\x73\x16\x1b\0\0\0\0\0\
\xb7\x01\0\0\x6f\0\0\0\x73\x16\x1a\0\0\0\0\0\x73\x16\x19\0\0\0\0\0\xb7\x01\0\0\
\x6c\0\0\0\x73\x16\x18\0\0\0\0\0\xb4\x01\0\0\x79\0\0\0\x73\x16\x23\0\0\0\0\0\
\xb4\x01\0\0\x72\0\0\0\x73\x16\x22\0\0\0\0\0\xb4\x01\0\0\x74\0\0\0\x73\x16\x21\
\0\0\0\0\0\xb4\x01\0\0\x6e\0\0\0\x73\x16\x20\0\0\0\0\0\xb4\x01\0\0\0\0\0\0\x63\
\x16\x14\0\0\0\0\0\x63\x06\x10\0\0\0\0\0\xbf\x61\0\0\0\0\0\0\xb7\x02\0\0\0\0\0\
\0\x85\0\0\0\x84\0\0\0\xb4\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x18\x01\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\xb7\x02\0\0\x58\0\0\0\xb7\x03\0\0\0\0\0\0\x85\0\0\0\x83\0\0\0\
\xbf\x06\0\0\0\0\0\0\x15\x06\x25\0\0\0\0\0\x85\0\0\0\x0e\0\0\0\x77\0\0\0\x20\0\
\0\0\x63\x06\0\0\0\0\0\0\x85\x10\0\0\xff\xff\xff\xff\x63\x06\x04\0\0\0\0\0\x85\
\0\0\0\x05\0\0\0\x7b\x06\x08\0\0\0\0\0\xb7\x01\0\0\x65\0\0\0\x7b\x1a\xf8\xff\0\
\0\0\0\x85\0\0\0\x08\0\0\0\x79\xa1\xf8\xff\0\0\0\0\x73\x16\x1f\0\0\0\0\0\xb7\
\x01\0\0\x20\0\0\0\x73\x16\x1e\0\0\0\0\0\xb7\x01\0\0\x29\0\0\0\x73\x16\x1d\0\0\
\0\0\0\xb7\x01\0\0\x28\0\0\0\x73\x16\x1c\0\0\0\0\0\xb7\x01\0\0\x70\0\0\0\x73\
\x16\x1b\0\0\0\0\0\xb7\x01\0\0\x6f\0\0\0\x73\x16\x1a\0\0\0\0\0\x73\x16\x19\0\0\
\0\0\0\xb7\x01\0\0\x6c\0\0\0\x73\x16\x18\0\0\0\0\0\xb4\x01\0\0\x69\0\0\0\x73\
\x16\x21\0\0\0\0\0\xb4\x01\0\0\x78\0\0\0\x73\x16\x20\0\0\0\0\0\xb4\x01\0\0\0\0\
\0\0\x63\x16\x14\0\0\0\0\0\x63\x06\x10\0\0\0\0\0\xb4\x01\0\0\x74\0\0\0\x73\x16\
\x22\0\0\0\0\0\xbf\x61\0\0\0\0\0\0\xb7\x02\0\0\0\0\0\0\x85\0\0\0\x84\0\0\0\xb4\
\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x44\x75\x61\x6c\x20\x42\x53\x44\x2f\x47\x50\
\x4c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x6c\x6f\x6f\x70\x28\x29\x20\x65\
\x6e\x74\x72\x79\0\x6c\x6f\x6f\x70\x28\x29\x20\x65\x78\x69\x74\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x01\0\0\0\x08\0\0\0\x50\0\0\0\0\0\0\0\x0a\0\0\0\x06\0\0\0\0\0\
\0\0\0\0\0\0\x01\0\0\0\x08\0\0\0\x50\0\0\0\0\0\0\0\x0a\0\0\0\x06\0\0\0\x9f\xeb\
\x01\0\x18\0\0\0\0\0\0\0\xe8\x03\0\0\xe8\x03\0\0\x95\x03\0\0\0\0\0\0\0\0\0\x02\
\x03\0\0\0\x01\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\
\x02\0\0\0\x04\0\0\0\x1b\0\0\0\x05\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\0\0\0\0\
\0\0\0\x02\x06\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x02\0\0\0\x04\0\0\0\0\0\0\x01\0\
\0\0\0\x02\0\0\x04\x10\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\x1e\0\0\0\x05\0\0\0\
\x40\0\0\0\x2a\0\0\0\0\0\0\x0e\x07\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0d\x02\0\0\0\
\x31\0\0\0\x01\0\0\x0c\x09\0\0\0\0\0\0\0\0\0\0\x02\x0c\0\0\0\x39\0\0\0\x15\0\0\
\x04\xa8\0\0\0\x41\0\0\0\x0d\0\0\0\0\0\0\0\x45\0\0\0\x0d\0\0\0\x40\0\0\0\x49\0\
\0\0\x0d\0\0\0\x80\0\0\0\x4d\0\0\0\x0d\0\0\0\xc0\0\0\0\x51\0\0\0\x0d\0\0\0\0\
\x01\0\0\x54\0\0\0\x0d\0\0\0\x40\x01\0\0\x57\0\0\0\x0d\0\0\0\x80\x01\0\0\x5b\0\
\0\0\x0d\0\0\0\xc0\x01\0\0\x5f\0\0\0\x0d\0\0\0\0\x02\0\0\x62\0\0\0\x0d\0\0\0\
\x40\x02\0\0\x65\0\0\0\x0d\0\0\0\x80\x02\0\0\x68\0\0\0\x0d\0\0\0\xc0\x02\0\0\
\x6b\0\0\0\x0d\0\0\0\0\x03\0\0\x6e\0\0\0\x0d\0\0\0\x40\x03\0\0\x71\0\0\0\x0d\0\
\0\0\x80\x03\0\0\x74\0\0\0\x0d\0\0\0\xc0\x03\0\0\x7c\0\0\0\x0d\0\0\0\0\x04\0\0\
\0\0\0\0\x0e\0\0\0\x40\x04\0\0\x7f\0\0\0\x0d\0\0\0\x80\x04\0\0\x85\0\0\0\x0d\0\
\0\0\xc0\x04\0\0\0\0\0\0\x16\0\0\0\0\x05\0\0\x88\0\0\0\0\0\0\x01\x08\0\0\0\x40\
\0\0\0\0\0\0\0\x03\0\0\x05\x08\0\0\0\x96\0\0\0\x0f\0\0\0\0\0\0\0\x99\0\0\0\x12\
\0\0\0\0\0\0\0\x9d\0\0\0\x15\0\0\0\0\0\0\0\xa5\0\0\0\0\0\0\x08\x10\0\0\0\xa9\0\
\0\0\0\0\0\x08\x11\0\0\0\xaf\0\0\0\0\0\0\x01\x02\0\0\0\x10\0\0\0\xbe\0\0\0\0\0\
\0\x08\x13\0\0\0\xc2\0\0\0\0\0\0\x08\x14\0\0\0\xc8\0\0\0\0\0\0\x01\x08\0\0\0\
\x40\0\0\0\x9d\0\0\0\x03\0\0\x84\x08\0\0\0\x96\0\0\0\x12\0\0\0\0\0\0\x10\xdb\0\
\0\0\x12\0\0\0\x10\0\0\x02\xde\0\0\0\x12\0\0\0\x12\0\0\x01\0\0\0\0\x03\0\0\x05\
\x08\0\0\0\xe2\0\0\0\x0f\0\0\0\0\0\0\0\xe5\0\0\0\x12\0\0\0\0\0\0\0\xe9\0\0\0\
\x17\0\0\0\0\0\0\0\xe9\0\0\0\x0a\0\0\x84\x08\0\0\0\xe2\0\0\0\x12\0\0\0\0\0\0\
\x10\xf1\0\0\0\x12\0\0\0\x10\0\0\x01\xf5\0\0\0\x12\0\0\0\x11\0\0\x01\xfd\0\0\0\
\x12\0\0\0\x12\0\0\x01\x01\x01\0\0\x12\0\0\0\x20\0\0\x08\x19\0\0\0\x12\0\0\0\
\x30\0\0\x04\x08\x01\0\0\x12\0\0\0\x38\0\0\x01\x10\x01\0\0\x12\0\0\0\x39\0\0\
\x01\x13\x01\0\0\x12\0\0\0\x3a\0\0\x01\x1a\x01\0\0\x12\0\0\0\x3c\0\0\x04\0\0\0\
\0\x01\0\0\x0d\x02\0\0\0\x22\x01\0\0\x0b\0\0\0\x26\x01\0\0\x01\0\0\x0c\x18\0\0\
\0\x38\x01\0\0\x01\0\0\x0c\x18\0\0\0\x49\x01\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\
\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x1b\0\0\0\x04\0\0\0\x0d\0\0\0\x4e\x01\0\0\0\0\0\
\x0e\x1c\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x1b\0\0\0\x04\0\0\0\x0c\0\0\
\0\x66\x03\0\0\x01\0\0\x0f\x0d\0\0\0\x1d\0\0\0\0\0\0\0\x0d\0\0\0\x6e\x03\0\0\
\x01\0\0\x0f\x10\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\x69\x6e\x74\0\x5f\x5f\x41\
\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\x5f\0\x74\x79\x70\
\x65\0\x6d\x61\x78\x5f\x65\x6e\x74\x72\x69\x65\x73\0\x65\x76\x65\x6e\x74\x73\0\
\x67\x65\x74\x5f\x74\x69\x64\0\x70\x74\x5f\x72\x65\x67\x73\0\x72\x31\x35\0\x72\
\x31\x34\0\x72\x31\x33\0\x72\x31\x32\0\x62\x70\0\x62\x78\0\x72\x31\x31\0\x72\
\x31\x30\0\x72\x39\0\x72\x38\0\x61\x78\0\x63\x78\0\x64\x78\0\x73\x69\0\x64\x69\
\0\x6f\x72\x69\x67\x5f\x61\x78\0\x69\x70\0\x66\x6c\x61\x67\x73\0\x73\x70\0\x75\
\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\0\x63\x73\0\x63\x73\x78\0\x66\
\x72\x65\x64\x5f\x63\x73\0\x75\x31\x36\0\x5f\x5f\x75\x31\x36\0\x75\x6e\x73\x69\
\x67\x6e\x65\x64\x20\x73\x68\x6f\x72\x74\0\x75\x36\x34\0\x5f\x5f\x75\x36\x34\0\
\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x6c\x6f\x6e\x67\x20\x6c\x6f\x6e\x67\0\x73\
\x6c\0\x77\x66\x65\0\x73\x73\0\x73\x73\x78\0\x66\x72\x65\x64\x5f\x73\x73\0\x73\
\x74\x69\0\x73\x77\x65\x76\x65\x6e\x74\0\x6e\x6d\x69\0\x76\x65\x63\x74\x6f\x72\
\0\x65\x6e\x63\x6c\x61\x76\x65\0\x6c\x6d\0\x6e\x65\x73\x74\x65\x64\0\x69\x6e\
\x73\x6e\x6c\x65\x6e\0\x63\x74\x78\0\x68\x61\x6e\x64\x6c\x65\x5f\x6c\x6f\x6f\
\x70\x5f\x65\x6e\x74\x72\x79\0\x68\x61\x6e\x64\x6c\x65\x5f\x6c\x6f\x6f\x70\x5f\
\x65\x78\x69\x74\0\x63\x68\x61\x72\0\x4c\x49\x43\x45\x4e\x53\x45\0\x2f\x68\x6f\
\x6d\x65\x2f\x6c\x68\x79\x2f\x6d\x6f\x6e\x69\x2f\x6c\x6f\x6f\x70\x5f\x6d\x6f\
\x6e\x69\x74\x6f\x72\x2e\x62\x70\x66\x2e\x63\0\x20\x20\x20\x20\x72\x65\x74\x75\
\x72\x6e\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\
\x70\x69\x64\x5f\x74\x67\x69\x64\x28\x29\x20\x26\x20\x30\x78\x46\x46\x46\x46\
\x46\x46\x46\x46\x3b\0\x20\x20\x20\x20\x65\x20\x3d\x20\x62\x70\x66\x5f\x72\x69\
\x6e\x67\x62\x75\x66\x5f\x72\x65\x73\x65\x72\x76\x65\x28\x26\x65\x76\x65\x6e\
\x74\x73\x2c\x20\x73\x69\x7a\x65\x6f\x66\x28\x2a\x65\x29\x2c\x20\x30\x29\x3b\0\
\x20\x20\x20\x20\x69\x66\x20\x28\x21\x65\x29\x20\x72\x65\x74\x75\x72\x6e\x20\
\x30\x3b\0\x20\x20\x20\x20\x65\x2d\x3e\x70\x69\x64\x20\x3d\x20\x62\x70\x66\x5f\
\x67\x65\x74\x5f\x63\x75\x72\x72\x65\x6e\x74\x5f\x70\x69\x64\x5f\x74\x67\x69\
\x64\x28\x29\x20\x3e\x3e\x20\x33\x32\x3b\0\x20\x20\x20\x20\x65\x2d\x3e\x74\x69\
\x64\x20\x3d\x20\x67\x65\x74\x5f\x74\x69\x64\x28\x29\x3b\0\x20\x20\x20\x20\x65\
\x2d\x3e\x74\x69\x6d\x65\x73\x74\x61\x6d\x70\x20\x3d\x20\x62\x70\x66\x5f\x6b\
\x74\x69\x6d\x65\x5f\x67\x65\x74\x5f\x6e\x73\x28\x29\x3b\0\x20\x20\x20\x20\x65\
\x2d\x3e\x63\x70\x75\x20\x3d\x20\x62\x70\x66\x5f\x67\x65\x74\x5f\x73\x6d\x70\
\x5f\x70\x72\x6f\x63\x65\x73\x73\x6f\x72\x5f\x69\x64\x28\x29\x3b\0\x20\x20\x20\
\x20\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x5f\x6d\x65\x6d\x63\x70\x79\x28\x65\
\x2d\x3e\x6d\x73\x67\x2c\x20\x22\x6c\x6f\x6f\x70\x28\x29\x20\x65\x6e\x74\x72\
\x79\x22\x2c\x20\x31\x32\x29\x3b\0\x20\x20\x20\x20\x65\x2d\x3e\x69\x74\x65\x72\
\x20\x3d\x20\x30\x3b\0\x20\x20\x20\x20\x62\x70\x66\x5f\x72\x69\x6e\x67\x62\x75\
\x66\x5f\x73\x75\x62\x6d\x69\x74\x28\x65\x2c\x20\x30\x29\x3b\0\x69\x6e\x74\x20\
\x42\x50\x46\x5f\x4b\x50\x52\x4f\x42\x45\x28\x68\x61\x6e\x64\x6c\x65\x5f\x6c\
\x6f\x6f\x70\x5f\x65\x6e\x74\x72\x79\x29\0\x20\x20\x20\x20\x5f\x5f\x62\x75\x69\
\x6c\x74\x69\x6e\x5f\x6d\x65\x6d\x63\x70\x79\x28\x65\x2d\x3e\x6d\x73\x67\x2c\
\x20\x22\x6c\x6f\x6f\x70\x28\x29\x20\x65\x78\x69\x74\x22\x2c\x20\x31\x31\x29\
\x3b\0\x69\x6e\x74\x20\x42\x50\x46\x5f\x4b\x52\x45\x54\x50\x52\x4f\x42\x45\x28\
\x68\x61\x6e\x64\x6c\x65\x5f\x6c\x6f\x6f\x70\x5f\x65\x78\x69\x74\x29\0\x6c\x69\
\x63\x65\x6e\x73\x65\0\x2e\x6d\x61\x70\x73\0\x2e\x74\x65\x78\x74\0\x75\x70\x72\
\x6f\x62\x65\x2f\x6c\x6f\x6f\x70\0\x75\x72\x65\x74\x70\x72\x6f\x62\x65\x2f\x6c\
\x6f\x6f\x70\0\0\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x34\0\0\0\x34\0\0\0\x2c\
\x02\0\0\x60\x02\0\0\0\0\0\0\x08\0\0\0\x74\x03\0\0\x01\0\0\0\0\0\0\0\x0a\0\0\0\
\x7a\x03\0\0\x01\0\0\0\0\0\0\0\x19\0\0\0\x86\x03\0\0\x01\0\0\0\0\0\0\0\x1a\0\0\
\0\x10\0\0\0\x74\x03\0\0\x02\0\0\0\0\0\0\0\x56\x01\0\0\x78\x01\0\0\x0c\x4c\0\0\
\x08\0\0\0\x56\x01\0\0\x78\x01\0\0\x05\x4c\0\0\x7a\x03\0\0\x0f\0\0\0\0\0\0\0\
\x56\x01\0\0\xac\x01\0\0\x09\x68\0\0\x30\0\0\0\x56\x01\0\0\xe1\x01\0\0\x09\x6c\
\0\0\x38\0\0\0\x56\x01\0\0\xf7\x01\0\0\x0e\x74\0\0\x40\0\0\0\x56\x01\0\0\xf7\
\x01\0\0\x29\x74\0\0\x48\0\0\0\x56\x01\0\0\xf7\x01\0\0\x0c\x74\0\0\x50\0\0\0\
\x56\x01\0\0\x26\x02\0\0\x0e\x78\0\0\x58\0\0\0\x56\x01\0\0\x26\x02\0\0\x0c\x78\
\0\0\x60\0\0\0\x56\x01\0\0\x3e\x02\0\0\x14\x7c\0\0\x68\0\0\0\x56\x01\0\0\x3e\
\x02\0\0\x12\x7c\0\0\x78\0\0\0\x56\x01\0\0\x65\x02\0\0\x0e\x80\0\0\x90\0\0\0\
\x56\x01\0\0\x8e\x02\0\0\x05\x88\0\0\x48\x01\0\0\x56\x01\0\0\xc0\x02\0\0\x0d\
\x84\0\0\x50\x01\0\0\x56\x01\0\0\x65\x02\0\0\x0c\x80\0\0\x58\x01\0\0\x56\x01\0\
\0\xd1\x02\0\0\x05\x90\0\0\x70\x01\0\0\x56\x01\0\0\xef\x02\0\0\x05\x5c\0\0\x86\
\x03\0\0\x10\0\0\0\0\0\0\0\x56\x01\0\0\xac\x01\0\0\x09\xb0\0\0\x30\0\0\0\x56\
\x01\0\0\xe1\x01\0\0\x09\xb4\0\0\x38\0\0\0\x56\x01\0\0\xf7\x01\0\0\x0e\xbc\0\0\
\x40\0\0\0\x56\x01\0\0\xf7\x01\0\0\x29\xbc\0\0\x48\0\0\0\x56\x01\0\0\xf7\x01\0\
\0\x0c\xbc\0\0\x50\0\0\0\x56\x01\0\0\x26\x02\0\0\x0e\xc0\0\0\x58\0\0\0\x56\x01\
\0\0\x26\x02\0\0\x0c\xc0\0\0\x60\0\0\0\x56\x01\0\0\x3e\x02\0\0\x14\xc4\0\0\x68\
\0\0\0\x56\x01\0\0\x3e\x02\0\0\x12\xc4\0\0\x78\0\0\0\x56\x01\0\0\x65\x02\0\0\
\x0e\xc8\0\0\x90\0\0\0\x56\x01\0\0\x11\x03\0\0\x05\xd0\0\0\x28\x01\0\0\x56\x01\
\0\0\xc0\x02\0\0\x0d\xcc\0\0\x30\x01\0\0\x56\x01\0\0\x65\x02\0\0\x0c\xc8\0\0\
\x40\x01\0\0\x56\x01\0\0\x11\x03\0\0\x05\xd0\0\0\x48\x01\0\0\x56\x01\0\0\xd1\
\x02\0\0\x05\xd8\0\0\x60\x01\0\0\x56\x01\0\0\x42\x03\0\0\x05\xa4\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\x03\0\0\0\x20\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\xcd\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x09\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x10\x01\0\0\0\0\0\0\x08\x01\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\
\x18\0\0\0\0\0\0\0\x11\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\
\x02\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x17\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x28\x02\0\0\0\0\0\
\0\x80\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x23\0\
\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa8\x03\0\0\0\0\0\0\x70\x01\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x32\0\0\0\x01\0\0\
\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x18\x05\0\0\0\0\0\0\x0d\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x3a\0\0\0\x01\0\0\0\x03\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x28\x05\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\x01\0\0\0\x32\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x38\x05\0\0\0\0\0\0\x19\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\x01\0\0\0\0\0\0\0\x9c\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x58\x05\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x02\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\
\x10\0\0\0\0\0\0\0\xac\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x78\
\x05\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x02\0\0\0\x05\0\0\0\x08\0\0\0\0\0\0\0\x10\0\
\0\0\0\0\0\0\xbf\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\x05\0\0\0\
\0\0\0\x95\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\xc4\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\x0d\0\0\0\0\0\0\x80\
\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct loop_monitor_bpf *loop_monitor_bpf::open(const struct bpf_object_open_opts *opts) { return loop_monitor_bpf__open_opts(opts); }
struct loop_monitor_bpf *loop_monitor_bpf::open_and_load() { return loop_monitor_bpf__open_and_load(); }
int loop_monitor_bpf::load(struct loop_monitor_bpf *skel) { return loop_monitor_bpf__load(skel); }
int loop_monitor_bpf::attach(struct loop_monitor_bpf *skel) { return loop_monitor_bpf__attach(skel); }
void loop_monitor_bpf::detach(struct loop_monitor_bpf *skel) { loop_monitor_bpf__detach(skel); }
void loop_monitor_bpf::destroy(struct loop_monitor_bpf *skel) { loop_monitor_bpf__destroy(skel); }
const void *loop_monitor_bpf::elf_bytes(size_t *sz) { return loop_monitor_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
loop_monitor_bpf__assert(struct loop_monitor_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __LOOP_MONITOR_BPF_SKEL_H__ */
